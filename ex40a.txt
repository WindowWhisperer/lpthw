
# Modules, classe, and Objects

class MyStuff(object):
    
    def __init__(self): # Note double underscore on both sides for init
        self.tangerine = "And now a thousand years between"

    def apple(self):
        print("I AM CLASSY APPLES!")


thing = MyStuff() 
thing.apple() 
print(thing.tangerine) 

# Python looks for MyStuff() and sees it is a class I've defined
# Python crafts an empty object with the functions I've specified in the def class
# Python looks to see if I made a _init_ function, and if have it calls that function to initialize newly created empty object
# In the _init_ there is an extra variable, self, which is the empoty object Python made for me and I can set it
# I set self.tangerine to a string and initiatialized this object
# Now Pythohn can take this newly minited object and assign it to the thing variable for me to work with
# Python is using the class like a blueprint to build copies of that type of thing.
# I know have three ways to get things from things.

# dict style
mystuff['apples']

# module style
mystuff.apples()
print(mystuff.tangerine)

# Class style
thing = MyStuff()
thing.apples()
print(thing.tangerine)